{
  "name": "galileo-io",
  "description": "Intel Galileo & Intel Edison IO Plugin for Johnny-Five",
  "version": "0.8.14",
  "homepage": "https://github.com/rwaldron/galileo-io",
  "author": {
    "name": "Rick Waldron",
    "email": "waldron.rick@gmail.com"
  },
  "contributors": [],
  "keywords": [
    "intel",
    "edison",
    "galileo",
    "io",
    "arduino",
    "firmata",
    "johnny-five",
    "mraa",
    "upm"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rwaldron/galileo-io.git"
  },
  "bugs": {
    "url": "https://github.com/rwaldron/galileo-io/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rwaldron/galileo-io/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/galileo",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "es6-shim": "latest",
    "es6-promise": "latest",
    "remapped": "~0.2.1"
  },
  "devDependencies": {
    "rewire": "~2.0.0",
    "sinon": "~1.7.3",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jsbeautifier": "~0.2.2"
  },
  "scripts": {
    "test": "grunt",
    "postinstall": "node scripts/postinstall"
  },
  "js-flags": "--harmony",
  "readme": "# Galileo-IO\n\n[![Build Status](https://travis-ci.org/rwaldron/galileo-io.png?branch=master)](https://travis-ci.org/rwaldron/galileo-io)\n\n## Galileo-IO is compatible with Intel's Galileo Generation 1, Galileo Generation 2 and Edison boards (Mini and Arduino Board, SparkFun GPIO and Arduino Blocks)\n\n\nGalileo-IO is a Firmata.js-compatibility class for writing Node.js programs that run on the [Intel Galileo](https://www-ssl.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html) or the [Intel Edison](http://www.intel.com/content/www/us/en/do-it-yourself/edison.html). This project was built at [Bocoup](http://bocoup.com)\n\n## Getting Started\n\n**As of 0.7.0, only the IoTKit image is supported**\n\nGalileo-IO scripts are run directly from the Galileo or Edison board. To get started, complete the appropriate setup instructions: \n\n- [Galileo](http://rexstjohn.com/galileo-gen-2-setup/)\n- [Edison](http://rexstjohn.com/setting-up-intel-edison-with-intel-xdk/)\n\n\n### Installation\n\n```\nnpm install galileo-io johnny-five\n```\n\n\n### Usage\n\nThis module can be used as an IO plugin for [Johnny-Five](https://github.com/rwaldron/johnny-five).\n\n## Pin Identity and Access\n\n#### Intel Galileo Gen 2\n\n> Or Gen 1 if you're a glutton for punishment. \n\nThe [Intel Galileo Gen 2](https://www-ssl.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html) has a pin-out form similar to an Arduino Uno. Use the pin numbers as printed on the board, eg. `3`, `13`, or `\"A0\"`.\n\n[![](https://cdn.sparkfun.com//assets/parts/1/0/1/3/8/13096-01.jpg)](https://cdn.sparkfun.com//assets/parts/1/0/1/3/8/13096-01.jpg)\n\nExample: \n\n```js\nvar five = require(\"johnny-five\");\nvar Galileo = require(\"galileo-io\");\nvar board = new five.Board({\n  io: new Galileo()\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(13);\n  led.blink(500);\n});\n```\n\n\n#### Intel Edison Arduino Breaout\n\nThe [Intel Edison + Arduino Breakout](https://www.sparkfun.com/products/13097) has a pin-out form similar to an Arduino Uno. Use the pin numbers as printed on the board, eg. `3`, `13`, or `\"A0\"`.\n\n[![](https://cdn.sparkfun.com//assets/parts/1/0/1/3/9/13097-02.jpg)](https://cdn.sparkfun.com//assets/parts/1/0/1/3/9/13097-02.jpg)\n\nExample: \n\n```js\nvar five = require(\"johnny-five\");\nvar Edison = require(\"galileo-io\");\nvar board = new five.Board({\n  io: new Edison()\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(13);\n  led.blink(500);\n});\n```\n\n#### Intel Edison Mini Breakout\n\nThe [Intel Edison + Mini Breakout](https://www.sparkfun.com/products/13025) has a dense pin-out form comprised of four rows, J17, J18, and J19, J20. Each pin is numbered, left-to-right, from 14 to 1 (if looking from the back). Use the row and column name (`\"J17-1\"`), or the corresponding GPIO (`\"GP182\"`), or pin number `0`, to interact with that pin. (Note: `\"J17-1\"`, `\"GP182\"` and `0` refer to the same pin). See the [table of valid pins](#pin-mapping-table-) below to determine corresponding Pin names and numbers. \\*\n\nConnection to bus `1`:\n\n|I2C-1-SDA|I2C-1-SCL|\n|---------|---------|\n|J17-8    |J18-6    |\n\n[![](https://cdn.sparkfun.com//assets/parts/1/0/0/1/1/13025-01.jpg)](https://cdn.sparkfun.com//assets/parts/1/0/0/1/1/13025-01.jpg)\n\n\nExample: \n\n```js\nvar five = require(\"johnny-five\");\nvar Edison = require(\"galileo-io\");\nvar board = new five.Board({\n  io: new Edison()\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(\"J17-1\");\n  /*\n    Same as: \n\n    var led = new five.Led(0);\n    var led = new five.Led(\"GP182\");\n   */\n  led.blink(500);\n});\n```\n\n\n#### SparkFun Edison GPIO Block\n\nThe [SparkFun Edison GPIO Block](https://www.sparkfun.com/products/13038) has two columns of pins. Use the GPIO name printed on the board (`\"GP44\"`), or the corresponding row and column name (`\"J19-4\"`), or pin number (`31`), to interact with that pin. (Note: `\"J19-4\"`, `\"GP44\"` and `31` refer to the same pin). See the [table of valid pins](#pin-mapping-table-) below to determine corresponding Pin names and numbers. \\*\n\n[![](https://cdn.sparkfun.com//assets/parts/1/0/0/3/9/13038-03.jpg)](https://cdn.sparkfun.com//assets/parts/1/0/0/3/9/13038-03.jpg)\n\nExample: \n\n```js\nvar five = require(\"johnny-five\");\nvar Edison = require(\"galileo-io\");\nvar board = new five.Board({\n  io: new Edison()\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(\"GP44\");\n  /*\n    Same as: \n\n    var led = new five.Led(31);\n    var led = new five.Led(\"J19-4\");\n   */\n  led.blink(500);\n});\n```\n\n#### SparkFun Edison Arduino Block\n\nThe [SparkFun Edison Arduino Block](https://www.sparkfun.com/products/13046) connects to the Edison via `Serial1`, or `/dev/ttyMFD1`. This means that a user must [upload StandardFirmata via FTDI programmer](https://learn.sparkfun.com/tutorials/sparkfun-blocks-for-intel-edison---arduino-block). Johnny-Five does not use Galileo-IO to communicate with the hardware on this block, instead it communicates via the serial connection, using its default [`Firmata.js`](https://github.com/jgautier/firmata) (this is installed by Johnny-Five automattically. The port name must be specified: \n\n```js\n// This code runs on the Edison, communicating with the \n// SparkFun Arduino Block via Serial1 (/dev/ttyMFD1)\nvar five = require(\"johnny-five\");\nvar board = new five.Board({\n  port: \"/dev/ttyMFD1\"\n});\n\nboard.on(\"ready\", function() {\n  var led = new five.Led(13);\n  led.blink(500);\n});\n```\n\n[![](https://cdn.sparkfun.com//assets/parts/1/0/0/3/7/13036-01.jpg)](https://cdn.sparkfun.com//assets/parts/1/0/0/3/7/13036-01.jpg)\n\n\n#### SparkFun Edison I2C Block\n\nGalileo-IO/Edison-IO will automattically connect to bus 1, which is the bus used by this block.\n\n\n#### SparkFun Edison 9DOF Block\n\nGalileo-IO/Edison-IO will automattically connect to bus 1, which is the bus used by this block.\n\n\n\n\n#### Pin Mapping Table \\* \n\n| Pin Number  | Physical Pin | Edison Pin    |\n|-------------|--------------|---------------|\n| 0           | J17-1        | GP182         |\n| 4           | J17-5        | GP135         |\n| 6           | J17-7        | GP27          |\n| 7           | J17-8        | GP20          |\n| 8           | J17-9        | GP28          |\n| 9           | J17-10       | GP111         |\n| 10          | J17-11       | GP109         |\n| 11          | J17-12       | GP115         |\n| 13          | J17-14       | GP128         |\n| 14          | J18-1        | GP13          |\n| 15          | J18-2        | GP165         |\n| 19          | J18-6        | GP19          |\n| 20          | J18-7        | GP12          |\n| 21          | J18-8        | GP183         |\n| 23          | J18-10       | GP110         |\n| 24          | J18-11       | GP114         |\n| 25          | J18-12       | GP129         |\n| 26          | J18-13       | GP130         |\n| 31          | J19-4        | GP44          |\n| 32          | J19-5        | GP46          |\n| 33          | J19-6        | GP48          |\n| 35          | J19-8        | GP131         |\n| 36          | J19-9        | GP14          |\n| 37          | J19-10       | GP40          |\n| 38          | J19-11       | GP43          |\n| 39          | J19-12       | GP77          |\n| 40          | J19-13       | GP82          |\n| 41          | J19-14       | GP83          |\n| 45          | J20-4        | GP45          |\n| 46          | J20-5        | GP47          |\n| 47          | J20-6        | GP49          |\n| 48          | J20-7        | GP15          |\n| 49          | J20-8        | GP84          |\n| 50          | J20-9        | GP42          |\n| 51          | J20-10       | GP41          |\n| 52          | J20-11       | GP78          |\n| 53          | J20-12       | GP79          |\n| 54          | J20-13       | GP80          |\n| 55          | J20-14       | GP81          |\n\n\n\n\n\n### Blink an Led\n\nThe \"Hello World\" of microcontroller programming:\n\n(attach an LED on pin 9)\n\n```js\nvar Galileo = require(\"galileo-io\");\nvar board = new Galileo();\n\nboard.on(\"ready\", function() {\n  var byte = 0;\n  this.pinMode(9, this.MODES.OUTPUT);\n\n  setInterval(function() {\n    board.digitalWrite(9, (byte ^= 1));\n  }, 500);\n});\n```\n\n### Johnny-Five IO Plugin\n\nGalileo-IO is the default [IO layer](https://github.com/rwaldron/johnny-five/wiki/IO-Plugins) for [Johnny-Five](https://github.com/rwaldron/johnny-five) programs that are run on a Galileo or Edison board.\n\n***Note:*** On the Edison, you should require johnny-five first, followed by galileo-io. Otherwise you'll get a segmentation fault.\n\nExample:\n```js\nvar five = require(\"johnny-five\");\nvar Edison = require(\"galileo-io\");\nvar board = new five.Board({\n  io: new Edison()\n});\n```\n\n### API\n\n**digitalWrite(pin, 1|0)**\n\n> Sets the pin to 1 or 0, which either connects it to 5V (the maximum voltage of the system) or to GND (ground).\n\nExample:\n```js\n// This will turn on the pin\nboard.digitalWrite(9, 1);\n```\n\n\n\n**analogWrite(pin, value)**\n\n> Sets the pin to a value between 0 and 255, where 0 is the same as LOW and 255 is the same as HIGH. This is sort of like sending a voltage between 0 and 5V, but since this is a digital system, it uses a mechanism called Pulse Width Modulation, or PWM. You could use analogWrite to dim an LED, as an example.\n\nExample:\n```js\n// Crank an LED to full brightness\nboard.analogWrite(9, 255);\n```\n\n**servoWrite(pin, value)** \n\n> Set the pin to a value between 0-180° to move the servo's horn to the corresponding position.\n\nExample:\n```js\nboard.servoWrite(9, 180);\n```\n\n**digitalRead(pin, handler)** Setup a continuous read handler for specific digital pin.\n\n> This will read the digital value of a pin, which can be read as either HIGH or LOW. If you were to connect the pin to 5V, it would read HIGH (1); if you connect it to GND, it would read LOW (0). Anywhere in between, it’ll probably read whichever one it’s closer to, but it gets dicey in the middle.\n\nExample:\n```js\n// Log all the readings for 9\nboard.digitalRead(9, function(data) {\n  console.log(data);\n});\n```\n\n\n**analogRead(pin, handler)** Setup a continuous read handler for specific analog pin.\n\n> This will read the analog value of a pin, which is a value from 0 to 4095, where 0 is LOW (GND) and 4095 is HIGH (5V). All of the analog pins (A0 to A5) can handle this. analogRead is great for reading data from sensors.\n\n\nExample:\n```js\n// Log all the readings for A1\nboard.analogRead(\"A1\", function(data) {\n  console.log(data);\n});\n\n```\n\n## License\nSee LICENSE file.\n\n",
  "readmeFilename": "readme.md",
  "_id": "galileo-io@0.8.14",
  "_shasum": "8e88e1492841efed39ba7e9364cd7c3c2b1c455e",
  "_from": "galileo-io@latest",
  "_resolved": "https://registry.npmjs.org/galileo-io/-/galileo-io-0.8.14.tgz"
}
